{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es5",                                /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    /* Modules */
    "module": "commonjs",                                /* Specify what module code is generated. */
    // "lib": [
    //   "DOM",
    //   "ES6",
    //   "DOM.Iterable",
    //   "ScriptHost"
    // ],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    /*
      lib 설정 : 타입스크립트는 node에서도 사용할수도 있고, 웹브라우저에서도 사용이 가능해. 그래서 
      const btn = document.querySelector("button)
      btn.addEventListner("click", () => {
        console.log("click Event!");
      })
      라고 한다면 btn이 있는지 여부를 타입스크립트는 알수가 없지.
      그런데 lib [ "dom" ]을 추가한다면 알수가 있어.
      추가하면 타입스크립트가 dom API를 모두 사용이 가능해. 
    */
    // 
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for legacy experimental decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */
    
    /* Modules */
                                                        /* Specify the root folder within your source files. */
    // "moduleResolution": "node10",                     /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "allowImportingTsExtensions": true,               /* Allow imports to include TypeScript file extensions. Requires '--moduleResolution bundler' and either '--noEmit' or '--emitDeclarationOnly' to be set. */
    // "resolvePackageJsonExports": true,                /* Use the package.json 'exports' field when resolving package imports. */
    // "resolvePackageJsonImports": true,                /* Use the package.json 'imports' field when resolving imports. */
    // "customConditions": [],                           /* Conditions to set in addition to the resolver-specific defaults when resolving imports. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "allowArbitraryExtensions": true,                 /* Enable importing files with any extension, provided a declaration file is present. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    /*
    // allowJs를 사용하면 자바스크립트 파일도 컴파일 해쥼ㅋ wow
        .ts아니라도 타입스크립트가 컴파일 해쥼.
    */

    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    /*
        하지만 checkJs 컴파일 안해, 그래도 구문을 검사하고 오류 알랴쥼
    */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    /*
        sourceMap: true로 하고 컴파일 하면, .js.map파일이 나와.
        이건 디버깅을 위해서 좋다고 할 수 있어. 컴파일 파일이 웹브라우저 로딩이 됨. 
        source탭에서,타입스크립트로  디버깅이 가능해. 
    */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */

    
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "rootDir": "./src",  
    "outDir": "./dist",                                   /* Specify an output folder for all emitted files. */
    "removeComments": true,                           /* Disable emitting comments. */
    /*
        타입스크립트 내에 주석 빼고 컴파일해. 젛다 뺴고 용량 줄이면 좋지뭐, 시간절약도됨.
    */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */

    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    "noEmitOnError": true,                              /* Disable emitting files if any type checking errors are reported. */
    /*
        예를들어 버튼 셀렉터 선택했으나, dom을 모르는경우,
        app.js 파일을 안만들어. 
        타입스크립트 컴파일 에러가 있으면 js파일을 안만들어. 기본값 false
    */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    //src/analytics.tsnstraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "verbatimModuleSyntax": true,                     /* Do not transform or elide any imports or exports not marked as type-only, ensuring they are written in the output file's format based on the 'module' setting. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true,                             /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    //"forceConsistentCasingInFileNames": true,            /* Ensure that casing is correct in imports. */
    /* Type Checking */
    //"strict": true,                                      /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    //"strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    /*
        이 값이 true면
        어떤 값이 null이 될 것같으면 타입스크립트가 나에게 잘 해결하라고 강요함
        타입스크립트가 html에 들어가서 확인하는 것은 아니라서,
        셀렉터가 있는지 여부를 알수가 없어.
        dom노드에서 포인터를 반환하지 못하면 null을 반환해.
        2가지로 해결이 가능한데
        1) "!" 느낌표 연산자는 개발자가 버튼이 존재하는걸 아니까 연산을 하면
          null이 아닌 값이 반환된다고 타입스크립트에게 알려주는 코드임.
        2) 아니면 걍 if(button) 조건문 감싸서 리스너 연결 해줭.  
    */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    /*
        이 옵션이 하는 일은 bind, call, apply함수가 호출되면
        설정이 타당한지 확인 험.
    
    */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    
    /*
        44. 코드 품질 관련 옵션
    */
    "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // 위 3개는 switch 문 관련, break 잊으면 알랴주고, 안쓰는 변수있음 알랴쥼.
    // 노랑색 꾸불꾸불한 라인은 에러는 아니고 경고, 
    
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true                                 /* Skip type checking all .d.ts files. */
  },
  "exclude": [
    "./src/analytics.ts",
    // "src/*.dev.ts",
    //"**/*.dev.ts",
    "node_modules" //  exclude 옵션 안쓸꺼면 추가 안해도 된대. // default 이거 기본설정으로 되있데, 
    // 하지만 exclude 옵션을 추가할꺼라면 node_modules추가하래. 안그럼 제외안한대.
  ],
  //"include" : [], // 반대로 여기에 추가 되지 않은 파일을 추가하려면 넣어.
  // exclude를 include와 함께 설정하면 include를 필터링해.
  // 즉, include하는 폴더에서 일부 하위 폴더를 exclude하면 그 폴더들은 모두 제외되.
  // include에서 exclude를 빼고 컴파일해
  // "files": [], // 프리파일로만 작업하는 소규모 프로젝트에 적합한 옵션.
}

// 중요한 옵션
/*

*/